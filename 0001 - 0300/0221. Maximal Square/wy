class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) { 
        if(matrix.size() == 0) return 0;
        std::vector<vector<int>> dp(matrix.size());
        int res = 0;
        for(int i = 0; i < dp.size(); i++)
        {
            dp[i].assign(matrix[i].size(), 0);
        }

        //base case;
        for(int i = 0; i < dp.size(); i++)
        {
            dp[i][0] = matrix[i][0] == '1'? 1:0;
            if(dp[i][0] > res) res = dp[i][0];
        }
        for(int i = 0; i < dp[0].size(); i++)
        {
            dp[0][i] = matrix[0][i] == '1' ? 1 : 0;
            if(dp[0][i] > res) res = dp[0][i];
        }

        for(int i = 1; i < dp.size();i++)
        {
            for(int j = 1; j < dp[i].size(); j++)
            {
                if(matrix[i][j] == '1')
                {
                    dp[i][j] = min(min(dp[i-1][j], dp[i][j-1]), dp[i-1][j-1]) + 1;
                    if(dp[i][j] > res) res = dp[i][j];
                }
                else dp[i][j] = 0;
            }
        }

        return pow(res,2);
    }
};
